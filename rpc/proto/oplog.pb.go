// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/proto/oplog.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SyncReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncReq) Reset()         { *m = SyncReq{} }
func (m *SyncReq) String() string { return proto.CompactTextString(m) }
func (*SyncReq) ProtoMessage()    {}
func (*SyncReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af94f207715b0b0, []int{0}
}

func (m *SyncReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncReq.Unmarshal(m, b)
}
func (m *SyncReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncReq.Marshal(b, m, deterministic)
}
func (m *SyncReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReq.Merge(m, src)
}
func (m *SyncReq) XXX_Size() int {
	return xxx_messageInfo_SyncReq.Size(m)
}
func (m *SyncReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReq proto.InternalMessageInfo

type SyncResp struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncResp) Reset()         { *m = SyncResp{} }
func (m *SyncResp) String() string { return proto.CompactTextString(m) }
func (*SyncResp) ProtoMessage()    {}
func (*SyncResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af94f207715b0b0, []int{1}
}

func (m *SyncResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncResp.Unmarshal(m, b)
}
func (m *SyncResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncResp.Marshal(b, m, deterministic)
}
func (m *SyncResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResp.Merge(m, src)
}
func (m *SyncResp) XXX_Size() int {
	return xxx_messageInfo_SyncResp.Size(m)
}
func (m *SyncResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResp proto.InternalMessageInfo

func (m *SyncResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type OplogReq struct {
	Offset               string   `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OplogReq) Reset()         { *m = OplogReq{} }
func (m *OplogReq) String() string { return proto.CompactTextString(m) }
func (*OplogReq) ProtoMessage()    {}
func (*OplogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af94f207715b0b0, []int{2}
}

func (m *OplogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OplogReq.Unmarshal(m, b)
}
func (m *OplogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OplogReq.Marshal(b, m, deterministic)
}
func (m *OplogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OplogReq.Merge(m, src)
}
func (m *OplogReq) XXX_Size() int {
	return xxx_messageInfo_OplogReq.Size(m)
}
func (m *OplogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OplogReq.DiscardUnknown(m)
}

var xxx_messageInfo_OplogReq proto.InternalMessageInfo

func (m *OplogReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *OplogReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type OplogResp struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OplogResp) Reset()         { *m = OplogResp{} }
func (m *OplogResp) String() string { return proto.CompactTextString(m) }
func (*OplogResp) ProtoMessage()    {}
func (*OplogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af94f207715b0b0, []int{3}
}

func (m *OplogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OplogResp.Unmarshal(m, b)
}
func (m *OplogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OplogResp.Marshal(b, m, deterministic)
}
func (m *OplogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OplogResp.Merge(m, src)
}
func (m *OplogResp) XXX_Size() int {
	return xxx_messageInfo_OplogResp.Size(m)
}
func (m *OplogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OplogResp.DiscardUnknown(m)
}

var xxx_messageInfo_OplogResp proto.InternalMessageInfo

func (m *OplogResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *OplogResp) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func init() {
	proto.RegisterType((*SyncReq)(nil), "proto.SyncReq")
	proto.RegisterType((*SyncResp)(nil), "proto.SyncResp")
	proto.RegisterType((*OplogReq)(nil), "proto.OplogReq")
	proto.RegisterType((*OplogResp)(nil), "proto.OplogResp")
}

func init() { proto.RegisterFile("rpc/proto/oplog.proto", fileDescriptor_8af94f207715b0b0) }

var fileDescriptor_8af94f207715b0b0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x2a, 0x48, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x2f, 0xc8, 0xc9, 0x4f, 0xd7, 0x03, 0xb3, 0x85, 0x58,
	0xc1, 0x94, 0x12, 0x27, 0x17, 0x7b, 0x70, 0x65, 0x5e, 0x72, 0x50, 0x6a, 0xa1, 0x92, 0x0a, 0x17,
	0x07, 0x84, 0x59, 0x5c, 0x20, 0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93, 0x9f, 0x98, 0x22,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x2a, 0x59, 0x70, 0x71, 0xf8, 0x83, 0x8c, 0x09,
	0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62, 0xcb, 0x4f, 0x4b, 0x2b, 0x4e, 0x2d, 0x01, 0x2b, 0xe2, 0x0c,
	0x82, 0xf2, 0x84, 0x44, 0xb8, 0x58, 0x73, 0x32, 0x73, 0x33, 0x4b, 0x24, 0x98, 0x14, 0x18, 0x35,
	0x98, 0x83, 0x20, 0x1c, 0x25, 0x5b, 0x2e, 0x4e, 0xa8, 0x4e, 0x7c, 0x16, 0x20, 0x19, 0xca, 0x84,
	0x6c, 0xa8, 0x51, 0x02, 0x17, 0x2b, 0x58, 0xbb, 0x90, 0x26, 0x17, 0x0b, 0xc8, 0x9d, 0x42, 0x7c,
	0x10, 0x9f, 0xe8, 0x41, 0xdd, 0x2f, 0xc5, 0x8f, 0xc2, 0x2f, 0x2e, 0x50, 0x62, 0x10, 0xd2, 0x81,
	0xe9, 0x81, 0xc9, 0xc1, 0x9c, 0x2e, 0x25, 0x80, 0x2a, 0x00, 0x52, 0x9d, 0xc4, 0x06, 0x16, 0x32,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x35, 0x1d, 0x83, 0xef, 0x32, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OplogClient is the client API for Oplog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OplogClient interface {
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error)
	Oplog(ctx context.Context, in *OplogReq, opts ...grpc.CallOption) (*OplogResp, error)
}

type oplogClient struct {
	cc *grpc.ClientConn
}

func NewOplogClient(cc *grpc.ClientConn) OplogClient {
	return &oplogClient{cc}
}

func (c *oplogClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/proto.Oplog/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oplogClient) Oplog(ctx context.Context, in *OplogReq, opts ...grpc.CallOption) (*OplogResp, error) {
	out := new(OplogResp)
	err := c.cc.Invoke(ctx, "/proto.Oplog/Oplog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OplogServer is the server API for Oplog service.
type OplogServer interface {
	Sync(context.Context, *SyncReq) (*SyncResp, error)
	Oplog(context.Context, *OplogReq) (*OplogResp, error)
}

// UnimplementedOplogServer can be embedded to have forward compatible implementations.
type UnimplementedOplogServer struct {
}

func (*UnimplementedOplogServer) Sync(ctx context.Context, req *SyncReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedOplogServer) Oplog(ctx context.Context, req *OplogReq) (*OplogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oplog not implemented")
}

func RegisterOplogServer(s *grpc.Server, srv OplogServer) {
	s.RegisterService(&_Oplog_serviceDesc, srv)
}

func _Oplog_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OplogServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Oplog/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OplogServer).Sync(ctx, req.(*SyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oplog_Oplog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OplogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OplogServer).Oplog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Oplog/Oplog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OplogServer).Oplog(ctx, req.(*OplogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Oplog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Oplog",
	HandlerType: (*OplogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Oplog_Sync_Handler,
		},
		{
			MethodName: "Oplog",
			Handler:    _Oplog_Oplog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/proto/oplog.proto",
}
