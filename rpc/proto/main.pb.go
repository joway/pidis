// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/proto/main.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnapshotReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotReq) Reset()         { *m = SnapshotReq{} }
func (m *SnapshotReq) String() string { return proto.CompactTextString(m) }
func (*SnapshotReq) ProtoMessage()    {}
func (*SnapshotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b95f2aa14308adb, []int{0}
}

func (m *SnapshotReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotReq.Unmarshal(m, b)
}
func (m *SnapshotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotReq.Marshal(b, m, deterministic)
}
func (m *SnapshotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotReq.Merge(m, src)
}
func (m *SnapshotReq) XXX_Size() int {
	return xxx_messageInfo_SnapshotReq.Size(m)
}
func (m *SnapshotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotReq proto.InternalMessageInfo

type SnapshotResp struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotResp) Reset()         { *m = SnapshotResp{} }
func (m *SnapshotResp) String() string { return proto.CompactTextString(m) }
func (*SnapshotResp) ProtoMessage()    {}
func (*SnapshotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b95f2aa14308adb, []int{1}
}

func (m *SnapshotResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotResp.Unmarshal(m, b)
}
func (m *SnapshotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotResp.Marshal(b, m, deterministic)
}
func (m *SnapshotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotResp.Merge(m, src)
}
func (m *SnapshotResp) XXX_Size() int {
	return xxx_messageInfo_SnapshotResp.Size(m)
}
func (m *SnapshotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotResp.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotResp proto.InternalMessageInfo

func (m *SnapshotResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type OplogReq struct {
	Offset               []byte   `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OplogReq) Reset()         { *m = OplogReq{} }
func (m *OplogReq) String() string { return proto.CompactTextString(m) }
func (*OplogReq) ProtoMessage()    {}
func (*OplogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b95f2aa14308adb, []int{2}
}

func (m *OplogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OplogReq.Unmarshal(m, b)
}
func (m *OplogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OplogReq.Marshal(b, m, deterministic)
}
func (m *OplogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OplogReq.Merge(m, src)
}
func (m *OplogReq) XXX_Size() int {
	return xxx_messageInfo_OplogReq.Size(m)
}
func (m *OplogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OplogReq.DiscardUnknown(m)
}

var xxx_messageInfo_OplogReq proto.InternalMessageInfo

func (m *OplogReq) GetOffset() []byte {
	if m != nil {
		return m.Offset
	}
	return nil
}

type OplogResp struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OplogResp) Reset()         { *m = OplogResp{} }
func (m *OplogResp) String() string { return proto.CompactTextString(m) }
func (*OplogResp) ProtoMessage()    {}
func (*OplogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b95f2aa14308adb, []int{3}
}

func (m *OplogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OplogResp.Unmarshal(m, b)
}
func (m *OplogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OplogResp.Marshal(b, m, deterministic)
}
func (m *OplogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OplogResp.Merge(m, src)
}
func (m *OplogResp) XXX_Size() int {
	return xxx_messageInfo_OplogResp.Size(m)
}
func (m *OplogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OplogResp.DiscardUnknown(m)
}

var xxx_messageInfo_OplogResp proto.InternalMessageInfo

func (m *OplogResp) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*SnapshotReq)(nil), "proto.SnapshotReq")
	proto.RegisterType((*SnapshotResp)(nil), "proto.SnapshotResp")
	proto.RegisterType((*OplogReq)(nil), "proto.OplogReq")
	proto.RegisterType((*OplogResp)(nil), "proto.OplogResp")
}

func init() { proto.RegisterFile("rpc/proto/main.proto", fileDescriptor_1b95f2aa14308adb) }

var fileDescriptor_1b95f2aa14308adb = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x2a, 0x48, 0xd6,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0xcc, 0xcc, 0xd3, 0x03, 0x33, 0x85, 0x58, 0xc1,
	0x94, 0x12, 0x2f, 0x17, 0x77, 0x70, 0x5e, 0x62, 0x41, 0x71, 0x46, 0x7e, 0x49, 0x50, 0x6a, 0xa1,
	0x92, 0x06, 0x17, 0x0f, 0x82, 0x5b, 0x5c, 0x20, 0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93,
	0x9f, 0x98, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x2a, 0x29, 0x71, 0x71, 0xf8,
	0x17, 0xe4, 0xe4, 0xa7, 0x07, 0xa5, 0x16, 0x0a, 0x89, 0x71, 0xb1, 0xe5, 0xa7, 0xa5, 0x15, 0xa7,
	0x96, 0x40, 0x15, 0x41, 0x79, 0x4a, 0xaa, 0x5c, 0x9c, 0x50, 0x35, 0xf8, 0x8c, 0x32, 0xca, 0xe7,
	0x62, 0x09, 0xc8, 0xf4, 0x0e, 0x13, 0x32, 0xe7, 0xe2, 0x80, 0x59, 0x2e, 0x24, 0x04, 0x71, 0xa6,
	0x1e, 0x92, 0xe3, 0xa4, 0x84, 0x31, 0xc4, 0x8a, 0x0b, 0x94, 0x18, 0x0c, 0x18, 0x85, 0xf4, 0xb8,
	0x58, 0xc1, 0xf6, 0x08, 0xf1, 0x43, 0x55, 0xc0, 0x5c, 0x26, 0x25, 0x80, 0x2a, 0x00, 0x51, 0x9f,
	0xc4, 0x06, 0x16, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x8a, 0x02, 0x0f, 0x1a, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PiKVClient is the client API for PiKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiKVClient interface {
	Snapshot(ctx context.Context, in *SnapshotReq, opts ...grpc.CallOption) (PiKV_SnapshotClient, error)
	Oplog(ctx context.Context, in *OplogReq, opts ...grpc.CallOption) (PiKV_OplogClient, error)
}

type piKVClient struct {
	cc *grpc.ClientConn
}

func NewPiKVClient(cc *grpc.ClientConn) PiKVClient {
	return &piKVClient{cc}
}

func (c *piKVClient) Snapshot(ctx context.Context, in *SnapshotReq, opts ...grpc.CallOption) (PiKV_SnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PiKV_serviceDesc.Streams[0], "/proto.PiKV/Snapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &piKVSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PiKV_SnapshotClient interface {
	Recv() (*SnapshotResp, error)
	grpc.ClientStream
}

type piKVSnapshotClient struct {
	grpc.ClientStream
}

func (x *piKVSnapshotClient) Recv() (*SnapshotResp, error) {
	m := new(SnapshotResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *piKVClient) Oplog(ctx context.Context, in *OplogReq, opts ...grpc.CallOption) (PiKV_OplogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PiKV_serviceDesc.Streams[1], "/proto.PiKV/Oplog", opts...)
	if err != nil {
		return nil, err
	}
	x := &piKVOplogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PiKV_OplogClient interface {
	Recv() (*OplogResp, error)
	grpc.ClientStream
}

type piKVOplogClient struct {
	grpc.ClientStream
}

func (x *piKVOplogClient) Recv() (*OplogResp, error) {
	m := new(OplogResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PiKVServer is the server API for PiKV service.
type PiKVServer interface {
	Snapshot(*SnapshotReq, PiKV_SnapshotServer) error
	Oplog(*OplogReq, PiKV_OplogServer) error
}

// UnimplementedPiKVServer can be embedded to have forward compatible implementations.
type UnimplementedPiKVServer struct {
}

func (*UnimplementedPiKVServer) Snapshot(req *SnapshotReq, srv PiKV_SnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (*UnimplementedPiKVServer) Oplog(req *OplogReq, srv PiKV_OplogServer) error {
	return status.Errorf(codes.Unimplemented, "method Oplog not implemented")
}

func RegisterPiKVServer(s *grpc.Server, srv PiKVServer) {
	s.RegisterService(&_PiKV_serviceDesc, srv)
}

func _PiKV_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnapshotReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiKVServer).Snapshot(m, &piKVSnapshotServer{stream})
}

type PiKV_SnapshotServer interface {
	Send(*SnapshotResp) error
	grpc.ServerStream
}

type piKVSnapshotServer struct {
	grpc.ServerStream
}

func (x *piKVSnapshotServer) Send(m *SnapshotResp) error {
	return x.ServerStream.SendMsg(m)
}

func _PiKV_Oplog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OplogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiKVServer).Oplog(m, &piKVOplogServer{stream})
}

type PiKV_OplogServer interface {
	Send(*OplogResp) error
	grpc.ServerStream
}

type piKVOplogServer struct {
	grpc.ServerStream
}

func (x *piKVOplogServer) Send(m *OplogResp) error {
	return x.ServerStream.SendMsg(m)
}

var _PiKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PiKV",
	HandlerType: (*PiKVServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Snapshot",
			Handler:       _PiKV_Snapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Oplog",
			Handler:       _PiKV_Oplog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/proto/main.proto",
}
